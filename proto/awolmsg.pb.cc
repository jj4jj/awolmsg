// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: awolmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "awolmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace awolmsg {

namespace {

const ::google::protobuf::Descriptor* MsgExt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_awolmsg_2eproto() {
  protobuf_AddDesc_awolmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "awolmsg.proto");
  GOOGLE_CHECK(file != NULL);
  MsgExt_descriptor_ = file->message_type(0);
  static const int MsgExt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExt, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExt, ttl_),
  };
  MsgExt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExt_descriptor_,
      MsgExt::default_instance_,
      MsgExt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExt));
  Msg_descriptor_ = file->message_type(1);
  static const int Msg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, ext_),
  };
  Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_awolmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExt_descriptor_, &MsgExt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_descriptor_, &Msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_awolmsg_2eproto() {
  delete MsgExt::default_instance_;
  delete MsgExt_reflection_;
  delete Msg::default_instance_;
  delete Msg_reflection_;
}

void protobuf_AddDesc_awolmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rawolmsg.proto\022\007awolmsg\"#\n\006MsgExt\022\014\n\004ti"
    "me\030\001 \001(\r\022\013\n\003ttl\030\002 \001(\r\"K\n\003Msg\022\n\n\002id\030\001 \002(\004"
    "\022\014\n\004type\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\022\034\n\003ext\030\004 \001("
    "\0132\017.awolmsg.MsgExt", 138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "awolmsg.proto", &protobuf_RegisterTypes);
  MsgExt::default_instance_ = new MsgExt();
  Msg::default_instance_ = new Msg();
  MsgExt::default_instance_->InitAsDefaultInstance();
  Msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_awolmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_awolmsg_2eproto {
  StaticDescriptorInitializer_awolmsg_2eproto() {
    protobuf_AddDesc_awolmsg_2eproto();
  }
} static_descriptor_initializer_awolmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgExt::kTimeFieldNumber;
const int MsgExt::kTtlFieldNumber;
#endif  // !_MSC_VER

MsgExt::MsgExt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:awolmsg.MsgExt)
}

void MsgExt::InitAsDefaultInstance() {
}

MsgExt::MsgExt(const MsgExt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:awolmsg.MsgExt)
}

void MsgExt::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ttl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExt::~MsgExt() {
  // @@protoc_insertion_point(destructor:awolmsg.MsgExt)
  SharedDtor();
}

void MsgExt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgExt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExt_descriptor_;
}

const MsgExt& MsgExt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awolmsg_2eproto();
  return *default_instance_;
}

MsgExt* MsgExt::default_instance_ = NULL;

MsgExt* MsgExt::New() const {
  return new MsgExt;
}

void MsgExt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgExt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, ttl_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:awolmsg.MsgExt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ttl;
        break;
      }

      // optional uint32 ttl = 2;
      case 2: {
        if (tag == 16) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:awolmsg.MsgExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:awolmsg.MsgExt)
  return false;
#undef DO_
}

void MsgExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:awolmsg.MsgExt)
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional uint32 ttl = 2;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ttl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:awolmsg.MsgExt)
}

::google::protobuf::uint8* MsgExt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:awolmsg.MsgExt)
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional uint32 ttl = 2;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ttl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awolmsg.MsgExt)
  return target;
}

int MsgExt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 ttl = 2;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgExt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExt::MergeFrom(const MsgExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExt::CopyFrom(const MsgExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExt::IsInitialized() const {

  return true;
}

void MsgExt::Swap(MsgExt* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(ttl_, other->ttl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExt_descriptor_;
  metadata.reflection = MsgExt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg::kIdFieldNumber;
const int Msg::kTypeFieldNumber;
const int Msg::kDataFieldNumber;
const int Msg::kExtFieldNumber;
#endif  // !_MSC_VER

Msg::Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:awolmsg.Msg)
}

void Msg::InitAsDefaultInstance() {
  ext_ = const_cast< ::awolmsg::MsgExt*>(&::awolmsg::MsgExt::default_instance());
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:awolmsg.Msg)
}

void Msg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:awolmsg.Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete ext_;
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_awolmsg_2eproto();
  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New() const {
  return new Msg;
}

void Msg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    if (has_ext()) {
      if (ext_ != NULL) ext_->::awolmsg::MsgExt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:awolmsg.Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ext;
        break;
      }

      // optional .awolmsg.MsgExt ext = 4;
      case 4: {
        if (tag == 34) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:awolmsg.Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:awolmsg.Msg)
  return false;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:awolmsg.Msg)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional .awolmsg.MsgExt ext = 4;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:awolmsg.Msg)
}

::google::protobuf::uint8* Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:awolmsg.Msg)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional .awolmsg.MsgExt ext = 4;
  if (has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awolmsg.Msg)
  return target;
}

int Msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .awolmsg.MsgExt ext = 4;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_ext()) {
      mutable_ext()->::awolmsg::MsgExt::MergeFrom(from.ext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg::Swap(Msg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(ext_, other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace awolmsg

// @@protoc_insertion_point(global_scope)
